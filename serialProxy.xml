@startmindmap
* 串口代理\n(Serial Port Proxy)

** 概念与功能
*** 定义
**** 桥接串口设备与 EdgeX 平台的中间件
**** 管理串口连接、数据读取与发送
*** 核心功能
**** 数据采集
***** 从串口设备读取原始数据
***** 示例：读取传感器字节流
**** 协议解析
***** 将原始数据转换为 EdgeX 格式
****** 原始数据：二进制/ASCII
****** 转换后：JSON 事件/读数
***** 数据验证
****** 校验和、帧结构验证
****** 示例：Modbus CRC 校验
**** 数据传输
***** 通过 REST 或 MessageBus 发布数据
***** 示例：发布到 MQTT 主题
**** 命令处理
***** 接收 EdgeX 命令
***** 转换为串口设备协议格式

** 在 EdgeX 中的作用
*** 简化设备集成
**** 支持传统串口设备
***** 示例：PLC、传感器
**** 标准化接口
***** REST、MQTT
*** 支持设备间通信
**** 数据上行
***** 设备 A 数据 -> 核心服务
**** 命令下行
***** 核心服务 -> 设备 B
**** 示例场景
***** 温度传感器触发阀门关闭
*** 提高实时性
**** 本地数据处理
**** 减少云端延迟
*** 增强灵活性
**** 动态添加/移除设备
**** 支持多种协议

** 设备间通信流程
*** 步骤 1：设备 A 数据采集
**** 串口代理读取设备 A 数据
**** 协议解析
***** 原始数据 -> JSON
***** 示例：温度 25.5°C
*** 步骤 2：数据发布
**** 发布到自定义 MessageBus 主题
***** 主题：device-a-data
*** 步骤 3：核心服务处理
**** 核心数据服务接收数据
**** 规则引擎分析
***** 示例：温度 > 50°C
*** 步骤 4：触发设备 B
**** 规则引擎发布命令
***** 主题：device-b-commands
***** 命令：关闭阀门
*** 步骤 5：命令下发
**** 串口代理接收命令
**** 协议解析
***** JSON -> 串口指令
***** 示例：Modbus 控制帧
**** 发送到设备 B

** 自定义 MessageBus 主题
*** 必要性
**** 数据隔离
***** 避免多设备数据混淆
***** 示例：device-a-data vs device-b-data
**** 灵活路由
***** 支持复杂业务逻辑
***** 示例：raw-data -> processed-data
**** 性能优化
***** 订阅方只处理相关数据
**** 可扩展性
***** 动态添加设备
*** 示例
**** 设备 A 数据主题
***** device-a-data
**** 设备 B 命令主题
***** device-b-commands

@endmindmap